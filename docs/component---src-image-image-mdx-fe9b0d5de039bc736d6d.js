(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{Yf63:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return b})),a.d(t,"default",(function(){return s}));a("W1QL"),a("t91x"),a("mXGw");var n=a("/FXl"),i=a("TjRS"),r=a("emOo"),c=a("orGU");a("ougK"),a("aD51");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}const b={};void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/Image/image.mdx"}});const l={_frontmatter:b},p=i.a;function s(e){let t=e.components,a=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,["components"]);return Object(n.b)(p,o({},l,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"image-"},Object(n.b)("inlineCode",{parentName:"h1"},"<Image />")),Object(n.b)("p",null,"A component that takes an endpoint from American Public Media's internal image API and turns it into a valid ",Object(n.b)("inlineCode",{parentName:"p"},"<img />")," object with a ",Object(n.b)("inlineCode",{parentName:"p"},"srcset")," and proper sizing. It can also be given a ",Object(n.b)("inlineCode",{parentName:"p"},"srcset")," and/or ",Object(n.b)("inlineCode",{parentName:"p"},"src")," manually via the fallback props. For example, this:"),Object(n.b)("pre",null,Object(n.b)("code",o({parentName:"pre"},{className:"language-javascript"}),"import { Image } from '@apmg/mimas'\nimport { imageData } from './data/image'\n\n<Image image={imageData} aspectRatio='widescreen' />\n")),Object(n.b)("p",null,"Would produce the following image:"),Object(n.b)(r.a,{image:c.a,aspectRatio:"widescreen",mdxType:"Image"}),Object(n.b)("p",null,"Most of the logic that parses the image data to either find or generate the required image information can be found on the ",Object(n.b)("a",o({parentName:"p"},{href:"/utils"}),"utils")," page."),Object(n.b)("h2",{id:"props"},"Props"),Object(n.b)("h3",{id:"image"},Object(n.b)("inlineCode",{parentName:"h3"},"image")),Object(n.b)("p",null,"A JSON endpoint from APM's Image API. If formatted as expected, this component will create the src, srcset, sizes, alt text, and aspect ratio."),Object(n.b)("h3",{id:"aspectratio"},Object(n.b)("inlineCode",{parentName:"h3"},"aspectRatio")),Object(n.b)("p",null,"Allows you to manually select one of the aspect ratios provided in the image endpoint. Can only be used if the ",Object(n.b)("inlineCode",{parentName:"p"},"image")," property data is provided and valid. Accepts one of the following strings:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"normal"),Object(n.b)("li",{parentName:"ul"},"square"),Object(n.b)("li",{parentName:"ul"},"thumbnail"),Object(n.b)("li",{parentName:"ul"},"widescreen"),Object(n.b)("li",{parentName:"ul"},"portrait"),Object(n.b)("li",{parentName:"ul"},"uncropped")),Object(n.b)("h3",{id:"fallbacksrcset"},Object(n.b)("inlineCode",{parentName:"h3"},"fallbackSrcSet")),Object(n.b)("p",null,"Accepts a srcset string and overrides any srcset generated from the ",Object(n.b)("inlineCode",{parentName:"p"},"image")," prop (if applicable). "),Object(n.b)("h3",{id:"fallbacksrc"},Object(n.b)("inlineCode",{parentName:"h3"},"fallbackSrc")),Object(n.b)("p",null,"Accepts a URL string and overrides any src set by the ",Object(n.b)("inlineCode",{parentName:"p"},"image")," prop (if applicable). "),Object(n.b)("h3",{id:"alt"},Object(n.b)("inlineCode",{parentName:"h3"},"alt")),Object(n.b)("p",null,"Accepts a string and overrides any alt phrase set by the ",Object(n.b)("inlineCode",{parentName:"p"},"image")," prop (if applicable)."),Object(n.b)("h3",{id:"sizes"},Object(n.b)("inlineCode",{parentName:"h3"},"sizes")),Object(n.b)("p",null,"Accepts a string and overrides any sizes attribute set by the ",Object(n.b)("inlineCode",{parentName:"p"},"image")," prop (if applicable)."))}void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!s.hasOwnProperty("__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/Image/image.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-image-image-mdx-fe9b0d5de039bc736d6d.js.map