{"version":3,"sources":["webpack:///../src/utils/utils.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0cAMO,MAAMA,EAAe,Q,qMAE5B,MAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,SADR,SAGA,6JAA4I,0BAAYC,WAAW,KAAvB,aAA5I,QAA0M,0BAAYA,WAAW,KAAvB,gBAA1M,gBACA,iBAAQ,CACN,GAAM,aACL,0BAAYA,WAAW,MAAvB,cACH,6DAA4C,0BAAYA,WAAW,KAAvB,aAA5C,OAAyG,0BAAYA,WAAW,KAAvB,gBAAzG,8CAAgN,0BAAYA,WAAW,KAAvB,SAAhN,KAAuQ,0BAAYA,WAAW,KAAvB,eAAvQ,QAAuU,0BAAYA,WAAW,KAAvB,kBAAvU,yBACA,qOAAoN,0BAAYA,WAAW,KAAvB,kBAApN,gCAA+S,0BAAYA,WAAW,KAAvB,QAA/S,6CACA,iBAAQ,CACN,GAAM,gBACL,0BAAYA,WAAW,MAAvB,iBACH,6DAA4C,0BAAYA,WAAW,KAAvB,aAA5C,OAAyG,0BAAYA,WAAW,KAAvB,gBAAzG,8CAAgN,0BAAYA,WAAW,KAAvB,SAAhN,QAA0Q,0BAAYA,WAAW,KAAvB,eAA1Q,WACA,gOAA+M,0BAAYA,WAAW,KAAvB,8BAA/M,qEACA,iBAAQ,CACN,GAAM,UACL,0BAAYA,WAAW,MAAvB,WACH,6DAA4C,0BAAYA,WAAW,KAAvB,aAA5C,OAAyG,0BAAYA,WAAW,KAAvB,gBAAzG,8CAAgN,0BAAYA,WAAW,KAAvB,SAAhN,QAA0Q,0BAAYA,WAAW,KAAvB,eAA1Q,mBAAqV,0BAAYA,WAAW,KAAvB,kBAArV,kCAAkb,0BAAYA,WAAW,KAAvB,eAAlb,YACA,iBAAQ,CACN,GAAM,UACL,0BAAYA,WAAW,MAAvB,WACH,6DAA4C,0BAAYA,WAAW,KAAvB,aAA5C,OAAyG,0BAAYA,WAAW,KAAvB,gBAAzG,8CAAgN,0BAAYA,WAAW,KAAvB,SAAhN,QAA0Q,0BAAYA,WAAW,KAAvB,OAA1Q,0CAAoW,0BAAYA,WAAW,KAAvB,OAApW,KAAyZ,0BAAYA,WAAW,KAAvB,uBAAzZ,yBACA,iBAAQ,CACN,GAAM,sBADR,sBAGA,yEACA,iBAAQ,CACN,GAAM,wBACL,0BAAYA,WAAW,MAAvB,yBACH,sGAAqF,0BAAYA,WAAW,KAAvB,eAArF,QAAqJ,0BAAYA,WAAW,KAAvB,SAArJ,qFAA4R,0BAAYA,WAAW,KAAvB,eAA5R,KAAyV,0BAAYA,WAAW,KAAvB,8BAAzV,KAAqa,0BAAYA,WAAW,KAAvB,qCAAra,SAA4f,0BAAYA,WAAW,KAAvB,aAA5f,KACA,iBAAQ,CACN,GAAM,kBACL,0BAAYA,WAAW,MAAvB,mBACH,gI,mMAKJJ,EAAWK,gBAAiB","file":"component---src-utils-utils-mdx-f5515c838f4ce0d839f8.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/kthompson/Git/apm-mimas/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"utils\"\n    }}>{`Utils`}</h1>\n    <p>{`This is where a lot of the tricky logic of this small but dense component takes place. All of these functions are called in both the `}<inlineCode parentName=\"p\">{`<Image />`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`<AmpImage />`}</inlineCode>{` components.`}</p>\n    <h3 {...{\n      \"id\": \"getsrcset\"\n    }}><inlineCode parentName=\"h3\">{`getSrcSet`}</inlineCode></h3>\n    <p>{`Takes in all the properties from the `}<inlineCode parentName=\"p\">{`<Image />`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`<AmpImage />`}</inlineCode>{` that called it, expecting some mix of the `}<inlineCode parentName=\"p\">{`image`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`aspectRatio`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`fallbackSrcSet`}</inlineCode>{` props in particular.`}</p>\n    <p>{`It figures out what aspect ratio it should use based on what is being asked for and if that aspect ratio exists, then it either generates the correct srcset string based on that information or returns the `}<inlineCode parentName=\"p\">{`fallbackSrcSet`}</inlineCode>{` if it was provided. Returns `}<inlineCode parentName=\"p\">{`null`}</inlineCode>{` if one truly cannot be found or created.`}</p>\n    <h3 {...{\n      \"id\": \"getinstances\"\n    }}><inlineCode parentName=\"h3\">{`getInstances`}</inlineCode></h3>\n    <p>{`Takes in all the properties from the `}<inlineCode parentName=\"p\">{`<Image />`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`<AmpImage />`}</inlineCode>{` that called it, expecting some mix of the `}<inlineCode parentName=\"p\">{`image`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`aspectRatio`}</inlineCode>{` props.`}</p>\n    <p>{`It figures out what aspect ratio it should use based on what is being asked for and if that aspect ratio exists, then it either returns that array of image instances or returns the instances from the `}<inlineCode parentName=\"p\">{`image.preferredAspectRatio`}</inlineCode>{`. Returns an empty array if one truly cannot be found or created.`}</p>\n    <h3 {...{\n      \"id\": \"getsrc\"\n    }}><inlineCode parentName=\"h3\">{`getSrc`}</inlineCode></h3>\n    <p>{`Takes in all the properties from the `}<inlineCode parentName=\"p\">{`<Image />`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`<AmpImage />`}</inlineCode>{` that called it, expecting some mix of the `}<inlineCode parentName=\"p\">{`image`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`fallbackSrc`}</inlineCode>{` props. Returns `}<inlineCode parentName=\"p\">{`image.fallback`}</inlineCode>{` property if available and the `}<inlineCode parentName=\"p\">{`fallbackSrc`}</inlineCode>{` if not.`}</p>\n    <h3 {...{\n      \"id\": \"getalt\"\n    }}><inlineCode parentName=\"h3\">{`getAlt`}</inlineCode></h3>\n    <p>{`Takes in all the properties from the `}<inlineCode parentName=\"p\">{`<Image />`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`<AmpImage />`}</inlineCode>{` that called it, expecting some mix of the `}<inlineCode parentName=\"p\">{`image`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`alt`}</inlineCode>{` props. Returns in order of preference `}<inlineCode parentName=\"p\">{`alt`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`image.short_caption`}</inlineCode>{` and an empty string.`}</p>\n    <h2 {...{\n      \"id\": \"internal-functions\"\n    }}>{`Internal Functions`}</h2>\n    <p>{`These functions are used by the above functions.`}</p>\n    <h3 {...{\n      \"id\": \"determineaspectratio\"\n    }}><inlineCode parentName=\"h3\">{`determineAspectRatio`}</inlineCode></h3>\n    <p>{`Takes in all the properties from the function that called it and makes use of `}<inlineCode parentName=\"p\">{`aspectRatio`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`image`}</inlineCode>{`. Figures out which aspect ratio to request in the following order of preference: `}<inlineCode parentName=\"p\">{`aspectRatio`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`image.preferredAspectRatio`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`image.preferred_aspect_ratio_slug`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`uncropped`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"generatesrcset\"\n    }}><inlineCode parentName=\"h3\">{`generateSrcSet`}</inlineCode></h3>\n    <p>{`Takes in an array of image instances for a given aspectRatio and generates a valid srcset string.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}