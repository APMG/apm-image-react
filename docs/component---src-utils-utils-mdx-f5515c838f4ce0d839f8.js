(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{Ngoi:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return b}));n("W1QL"),n("t91x"),n("mXGw");var a=n("/FXl"),i=n("TjRS");n("aD51");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}const o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/utils/utils.mdx"}});const p={_frontmatter:o},c=i.a;function b(e){let t=e.components,n=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,["components"]);return Object(a.b)(c,r({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"utils"},"Utils"),Object(a.b)("p",null,"This is where a lot of the tricky logic of this small but dense component takes place. All of these functions are called in both the ",Object(a.b)("inlineCode",{parentName:"p"},"<Image />")," and ",Object(a.b)("inlineCode",{parentName:"p"},"<AmpImage />")," components."),Object(a.b)("h3",{id:"getsrcset"},Object(a.b)("inlineCode",{parentName:"h3"},"getSrcSet")),Object(a.b)("p",null,"Takes in all the properties from the ",Object(a.b)("inlineCode",{parentName:"p"},"<Image />")," or ",Object(a.b)("inlineCode",{parentName:"p"},"<AmpImage />")," that called it, expecting some mix of the ",Object(a.b)("inlineCode",{parentName:"p"},"image"),", ",Object(a.b)("inlineCode",{parentName:"p"},"aspectRatio")," and ",Object(a.b)("inlineCode",{parentName:"p"},"fallbackSrcSet")," props in particular."),Object(a.b)("p",null,"It figures out what aspect ratio it should use based on what is being asked for and if that aspect ratio exists, then it either generates the correct srcset string based on that information or returns the ",Object(a.b)("inlineCode",{parentName:"p"},"fallbackSrcSet")," if it was provided. Returns ",Object(a.b)("inlineCode",{parentName:"p"},"null")," if one truly cannot be found or created."),Object(a.b)("h3",{id:"getinstances"},Object(a.b)("inlineCode",{parentName:"h3"},"getInstances")),Object(a.b)("p",null,"Takes in all the properties from the ",Object(a.b)("inlineCode",{parentName:"p"},"<Image />")," or ",Object(a.b)("inlineCode",{parentName:"p"},"<AmpImage />")," that called it, expecting some mix of the ",Object(a.b)("inlineCode",{parentName:"p"},"image")," and ",Object(a.b)("inlineCode",{parentName:"p"},"aspectRatio")," props."),Object(a.b)("p",null,"It figures out what aspect ratio it should use based on what is being asked for and if that aspect ratio exists, then it either returns that array of image instances or returns the instances from the ",Object(a.b)("inlineCode",{parentName:"p"},"image.preferredAspectRatio"),". Returns an empty array if one truly cannot be found or created."),Object(a.b)("h3",{id:"getsrc"},Object(a.b)("inlineCode",{parentName:"h3"},"getSrc")),Object(a.b)("p",null,"Takes in all the properties from the ",Object(a.b)("inlineCode",{parentName:"p"},"<Image />")," or ",Object(a.b)("inlineCode",{parentName:"p"},"<AmpImage />")," that called it, expecting some mix of the ",Object(a.b)("inlineCode",{parentName:"p"},"image")," and ",Object(a.b)("inlineCode",{parentName:"p"},"fallbackSrc")," props. Returns ",Object(a.b)("inlineCode",{parentName:"p"},"image.fallback")," property if available and the ",Object(a.b)("inlineCode",{parentName:"p"},"fallbackSrc")," if not."),Object(a.b)("h3",{id:"getalt"},Object(a.b)("inlineCode",{parentName:"h3"},"getAlt")),Object(a.b)("p",null,"Takes in all the properties from the ",Object(a.b)("inlineCode",{parentName:"p"},"<Image />")," or ",Object(a.b)("inlineCode",{parentName:"p"},"<AmpImage />")," that called it, expecting some mix of the ",Object(a.b)("inlineCode",{parentName:"p"},"image")," and ",Object(a.b)("inlineCode",{parentName:"p"},"alt")," props. Returns in order of preference ",Object(a.b)("inlineCode",{parentName:"p"},"alt"),", ",Object(a.b)("inlineCode",{parentName:"p"},"image.short_caption")," and an empty string."),Object(a.b)("h2",{id:"internal-functions"},"Internal Functions"),Object(a.b)("p",null,"These functions are used by the above functions."),Object(a.b)("h3",{id:"determineaspectratio"},Object(a.b)("inlineCode",{parentName:"h3"},"determineAspectRatio")),Object(a.b)("p",null,"Takes in all the properties from the function that called it and makes use of ",Object(a.b)("inlineCode",{parentName:"p"},"aspectRatio")," and ",Object(a.b)("inlineCode",{parentName:"p"},"image"),". Figures out which aspect ratio to request in the following order of preference: ",Object(a.b)("inlineCode",{parentName:"p"},"aspectRatio"),", ",Object(a.b)("inlineCode",{parentName:"p"},"image.preferredAspectRatio"),", ",Object(a.b)("inlineCode",{parentName:"p"},"image.preferred_aspect_ratio_slug"),", and ",Object(a.b)("inlineCode",{parentName:"p"},"uncropped"),"."),Object(a.b)("h3",{id:"generatesrcset"},Object(a.b)("inlineCode",{parentName:"h3"},"generateSrcSet")),Object(a.b)("p",null,"Takes in an array of image instances for a given aspectRatio and generates a valid srcset string."))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/utils/utils.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-utils-utils-mdx-f5515c838f4ce0d839f8.js.map